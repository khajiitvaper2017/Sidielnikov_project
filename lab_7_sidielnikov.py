# %% [markdown]
# ---
# title: 'Лабораторна робота №7. Словники, кортежі. Обробка винятків (empty)'
# description:
#    Документ зроблено за допомогою [Quarto](https://quarto.org/)
# author: "Сідєльніков Даніїл, 2023"
# date: "10.05.2023"
# lang: ukr
# format:
#   html:
#     code-fold: true
#     toc: true # меню
#     toc_float: # спливаюче меню  
#       collapsed: true # авто
#       number_sections: true
# jupyter: python3
# ---

# %% [markdown]
# __Мета:__ _навчитися працювати зі структурами даних Кортеж та Словник. Навчитись обробляти основні типи винятків_

# %% [markdown]
# ## Що ви будете вміти?
# * створювати та обробляти кортежі (`tuple`).
# * створювати і обробляти словники (`dict`).
# * сумісно викростовувати словники і кортежі
# * обробляти основні типи винятків.

# %% [markdown]
# ## Робота зі словниками

# %% [markdown]
# ### Приклад 1
# 
# Створіть кортеж, який містить інформацію про результати іспитів з трьох предметів для студента (наприклад, математика, фізика та хімія). Виведіть на екран середній бал та максимальний бал.

# %%
results = (80, 75, 90)

average_score = sum(results) / len(results)
max_score = max(results)

print(f"Середній бал: {average_score}")
print(f"Максимальний бал: {max_score}")

# %% [markdown]
# У цьому коді ми створюємо кортеж `results`, який містить оцінки студента з трьох предметів. Потім ми обчислюємо середній бал, використовуючи вбудовані функції `sum` та `len`, та максимальний бал, використовуючи вбудовану функцію `max`. Нарешті, ми виводимо ці значення на екран за допомогою функції `print`. Водночас ми продемонстрували один з варіантів форматованого виводу.

# %% [markdown]
# ### Приклад 2 

# %% [markdown]
# Створіть програму, яка буде обчислювати площу трикутника за трьома сторонами, які користувач введе з клавіатури. Збережіть введені користувачем значення за допомогою кортежів та виведіть їх на екран.

# %%
a = float(input("Введіть довжину першої сторони трикутника: "))
b = float(input("Введіть довжину другої сторони трикутника: "))
c = float(input("Введіть довжину третьої сторони трикутника: "))

# обчислюємо півпериметр
p = (a + b + c) / 2

# обчислюємо площу трикутника за формулою Герона
area = (p * (p - a) * (p - b) * (p - c)) ** 0.5

# зберігаємо введені користувачем значення у кортеж
triangle_sides = (a, b, c)

# виводимо на екран введені користувачем значення та площу трикутника
print(f"Довжина сторін трикутника: {triangle_sides}")
print(f"Площа трикутника: {area}")


# %% [markdown]
# У цьому прикладі ми використовуємо кортеж `triangle_sides`, щоб зберегти довжини трьох сторін трикутника, які введені користувачем з клавіатури. 

# %% [markdown]
# ### Приклад 3 

# %% [markdown]
# Напишіть програму, яка змінює порядок елементів у кортежі. Користувач повинен ввести кортеж, а програма повинна вивести його елементи у зворотному порядку.

# %%
t = tuple(input("Введіть елементи кортежу, розділені комою: ").split(','))

# змінюємо порядок елементів у кортежі
reversed_t = t[::-1]

# виводимо зворотний порядок елементів на екран
print(f"Зворотний порядок елементів кортежу: {reversed_t}")

# %% [markdown]
# У цьому прикладі ми використовуємо оператор зрізу `[::]`, щоб змінити порядок елементів у кортежі `t` на зворотний порядок. Потім ми виводимо на екран зворотний порядок елементів у новому кортежі `reversed_t`.
# 
# Наприклад, якщо користувач введе `"1,2,3,4,5"`, програма виведе на екран: "Зворотний порядок елементів кортежу: `('5', '4', '3', '2', '1')`.

# %% [markdown]
# ### Завдання 1

# %% [markdown]
# Напишіть програму, яка створює кортеж зі списку чисел, а потім виводить на екран всі числа, які менші за задане число `n`. Умова: користувач вводить число `n`, і   щоб створити новий список `result`, який містить всі числа з кортежу, які менші за `n`, реалізувати за допомогою генератора списків.

# %%
n = int(input("Введіть число: "))
t = (10, 20, 30, 40, 50, 60, 70, 80, 90, 100)

# створюємо новий список, який містить всі числа з кортежу, які менші за n
result = [i for i in t if i < n]

print(result)

# %% [markdown]
# ### Завдання 2
# Напишіть програму, яка створює кортеж з трьох елементів, які є рядками, та з'єднує їх в один рядок з комою як роздільником. Примітка: з'єднати рядки також можна за допомогою методу `.joint()`

# %%
t = (input("Введіть перший рядок: "), input("Введіть другий рядок: "), input("Введіть третій рядок: "))

result = ', '.join(t)

print(result)

# %% [markdown]
# ### Завдання 3 

# %% [markdown]
# Створіть словник, який містить інформацію про книги в бібліотеці. Ключами будуть назви книг, а значеннями - автори, рік видання та кількість сторінок. Виведіть на екран інформацію про книгу, введену користувачем.

# %%
books = dict()
books["The Hobbit"] = "J. R. R. Tolkien"
books["The Lord of the Rings"] = "J. R. R. Tolkien"
books["The Little Prince"] = "Antoine de Saint-Exupéry"
books["Harry Potter"] = "J. K. Rowling"

try:
    print("Author: ", books[input("Введіть назву книги: ")])
except KeyError:
    print("Такої книги немає у словнику")

# %% [markdown]
# ## Сумісна робота зі словниками і кортежами

# %% [markdown]
# ### Приклад 1

# %% [markdown]
# Написати програму, яка веде облік студентів групи, забезпечуючи можливість зберігати ім'я і прізвище студента та його оцінки, і виводить середній бал по предметах.

# %%
school_class = {}

while True:
    name = input("Enter the student's name: ")
    if name == '':
        break
    
    score = int(input("Enter the student's score (0-10): "))
    if score not in range(0, 11):
	    break
    
    if name in school_class:
        school_class[name] += (score,)
    else:
        school_class[name] = (score,)
        
for name in sorted(school_class.keys()):
    adding = 0
    counter = 0
    for score in school_class[name]:
        adding += score
        counter += 1
    print(name, ":", adding / counter)

# %% [markdown]
# ### Завдання 4

# %% [markdown]
# Напишіть програму, яка створює словник, що містить інформацію про студентів, використовуючи вказані кортежі в якості значень. Кожен ключ -- це прізвище студента. Виведіть на екран інформацію про студента, введеного користувачем.

# %%
school_class = {}

while True:
    name = input("Enter the student's last name: ")
    if name == '':
        break

    info = tuple(input("Enter information about the student: ").split(','))

    school_class[name] = info

print("Info about the student:", school_class[input("Enter the student's last name: ")])


# %% [markdown]
# ### Завдання 5

# %% [markdown]
# Створіть словник, який містить інформацію про більше, ніж один номер телефону для кожного з контактів в телефонній книзі. Ключами будуть імена контактів, а значеннями - список їхніх номерів телефонів. Напишіть функцію, яка дозволяє додати новий номер телефону до списку номерів телефону певного контакту. Потім виведіть на екран список номерів телефонів для всіх контактів.

# %%
phonebook = {}

def add_contact():
    name = input("Enter the contact's name: ")
    phone_number = input("Enter the contact's phone number: ")

    if name not in phonebook:
        phonebook[name] = (phone_number,)
    else:
        phonebook[name] += (phone_number,)

def show_all_contacts():
    for name in phonebook:
        print(name, ":", phonebook[name])

while True:
    print("1. Add contact")
    print("2. Show all contacts")
    print("3. Exit")

    choice = int(input("Enter your choice: "))

    if choice == 1:
        add_contact()
    elif choice == 2:
        show_all_contacts()
    elif choice == 3:
        break
    else:
        print("Incorrect input")

# %% [markdown]
# ## Завдання для самостіної роботи
# 
# 1. Виконати завдання 1-5 наведені вище у цьому зошиті.
# 
# 1. Створити файл __lab_7_StudentLastName.py__ з написаним кодом. 
# 
# 1. Закомітити файл у локальний репозиторій.
# 
# 1. Відправити ("запушити") поточну версію Git-проєкта у віддалений репозиторій на GitHub.
# 
# 1. Звіт має складатися з файлу (за основу взяти __цей Python-зошит__)  `lab_7_StudentLastName.ipynb`. (Можливі якісь додакові файли)

# %% [markdown]
# ## Контрольні запитання
# 
# 1. Що виведе наступний код?
# 
# ```
# my_tuple = (1, 2, 3)
# print(my_tuple[1:])
# ```
# 
# Код виведе `(2, 3)`
# 
# 2. Що виведе наступний код?
# ```
# my_dict = {'a': 1, 'b': 2, 'c': 3}
# print(my_dict.get('d', 4))
# ```
# 
# Код виведе `4`
# 
# 3. Що виведе наступний код?
# ```
# my_tuple = (1, 2, 3)
# my_tuple[0] = 4
# print(my_tuple)
# ```
# 
# Цей код виведе помилку, оскільки кортежі не можна змінювати.
# 
# 4. Що виведе наступний код?
# ```
# my_dict = {'a': 1, 'b': 2, 'c': 3}
# my_dict.update({'d': 4})
# print(my_dict)
# ```
# 
# Код виведе `{'a': 1, 'b': 2, 'c': 3, 'd': 4}`
# 

# %% [markdown]
# ## References

# %% [markdown]
# 1. [Anaconda (Python distribution)](https://uk.wikipedia.org/wiki/Anaconda_(Python_distribution))
# 2. [Conda](https://conda.io/en/latest/)
# 3. [Pro Git Book](https://git-scm.com/book/en/v2)
# 4. [OpenEDG Python Institute](https://pythoninstitute.org/)
# 5. [Cisco. Networking Academy](https://www.netacad.com/)
# 6. [Научно-издательская система Quarto](https://data-visualization-blog.netlify.app/posts/quarto/)


