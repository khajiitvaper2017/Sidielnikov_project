# %% [markdown]
# ---
# title: "Лабораторна робота №3. Змінні. Базові операції вводу/виводу"
# description:
#   Документ зроблено за допомогою [Quarto](https://quarto.org/)
# author: "&copy; [<span style='color: blue;'>Valeriy Sydorenko </span>](https://www.linkedin.com/in/valeriy-sydorenko-6782279a/), 2023"
# date: "09.14.2023"
# lang: ukr
# format:
#   html:
#     code-fold: true
#     toc: true # меню
#     toc_float: # спливаюче меню  
#       collapsed: true # авто
#       number_sections: true
# jupyter: python3
# ---

# %% [markdown]
# __Мета:__ _освоїти роботу зі змінними та операції вводу і виводу_

# %% [markdown]
# #### Що ви будете вміти?
# * оперувати змінними строкового, цілого типу та типу з плаваючою комою.
# * використовувати функцію `input()`.
# * використовувати функції конвертації типів `int()`, `float()`, `string()`.

# %% [markdown]
# ## Робота зі змінними

# %% [markdown]
# ### Приклад
# 
# Написати програму, яка вводить довжини катетів $a$ та $b$ прямокутного трикутника та обчислює його гіпотенузу $c$.

# %%
a = 3.0
b = 4.0
c = (a ** 2 + b ** 2) ** 0.5
print("c =", c)

# %% [markdown]
# ### Завдання № 1
# 
# Написати програму, яка обчислює значення функції Гауса: 
# $$f(x) = \frac{1}{\sigma \sqrt{2 \pi}} e^{-\frac{(x-\mu)^2}{2\sigma^2}}$$

# %%
import math

def gaus(x, mu, sigma):
    return 1 / (sigma * (2 * math.pi) ** 0.5) * math.e ** (- (x - mu) ** 2 / (2 * sigma ** 2))
    
print(gaus(1, 0, 1))

# %% [markdown]
# ###  Завдання № 2

# %% [markdown]
# Ось невелика розповідь:
# 
# Якось Джон (John) мав три яблука, Мері (Mary) мала п'ять яблук, а Адам (Adam) мав шість яблук. Усі вони були дуже щасливі та жили довго. Кінець історії.
# 
# Ваше завдання:
# 
# * створіть змінні: `john`, `mary`, і `adam`;
# 
# * надайте значення змінним. Значення повинні дорівнювати кількості фруктів, якими володіють Джон, Мері, і Адам відповідно;
# 
# * зберігши числа в змінних, виведіть змінні в один рядок і розділіть їх комами;
# 
# * тепер створіть нову змінну з ім'ям `totalApple`, що дорівнює сумі трьох попередніх змінних;
# 
# * вивести значення, збережене в `totalapples`, в консоль;
# 
# * надрукувати рядок та ціле число разом в одному рядку, наприклад, "Загальна кількість яблук:" та `total_apples`|.

# %%
john = 3
mary = 5
adam = 6

print(john, mary, adam, sep=", ")

total_apples = john + mary + adam
print("Загальна кількість яблук:", total_apples)

# %% [markdown]
# ### Завдання № 3

# %% [markdown]
# Милі та кілометри – це одиниці довжини або відстані.
# 
# Враховуючи, що 1 миля дорівнює приблизно 1.61 кілометрам, напишіть програму, щоб вона перетворила:
# 
# * милі у кілометри;
# 
# * кілометри на милі.
# 
# Не змінюйте нічого в існуючому коді. Напишіть свій код у місцях, вказаних ###. Протестуйте вашу програму з даними, які надано у вихідному коді.
# 
# Зверніть особливу увагу на те, що відбувається всередині функції `print()`. Проаналізуйте, як ми надаємо кілька аргументів функції та як ми виводимо очікувані дані.
# 
# Зауважте, що деякі аргументи всередині функції `print()` є рядками (наприклад, `"miles is"`, тоді як деякі інші є змінними (наприклад, `miles`).

# %%
kilometers = 12.25
miles = 7.38

miles_to_kilometers = 1.61 * miles
kilometers_to_miles = kilometers / 1.61

print(miles, "miles is", round(miles_to_kilometers, 2), "kilometers")
print(kilometers, "kilometers is", round(kilometers_to_miles, 2), "miles")

# %% [markdown]
# Очикуваний вивод:
# 
# `7.38 miles is 11.88 kilometers`
# 
# `12.25 kilometers is 7.61 miles`

# %% [markdown]
# ### Завдання № 4

# %% [markdown]
# Подивіться код у редакторі: він читає "плаваюче" значення, поміщає його у змінну з ім'ям `x`, і друкує значення змінної з ім'ям `y`. Ваше завдання - завершити код, щоб оцінити такий вираз:
# 
# $$3x^3 - 2x^2 + 3^x - 1$$
# 
# Результат має бути присвоєний `y`.

# %%
x =  -1
x = float(x)
y = 3 * x ** 3 - 2 * x ** 2 + 3 * x - 1
print("y =", y)

# %% [markdown]
# __Тестові данні__

# %% [markdown]
# Приклад вводу
# 
# `x = 0`
# 
# `x = 1`
# 
# `x = -1`

# %% [markdown]
# Приклад виводу
# 
# `y = -1.0`
# 
# `y = 3.0`
# 
# `y = -9.0`

# %% [markdown]
# ### Завдання № 5 

# %% [markdown]
# Код редактора містить коментарі. Спробуйте покращити його: додайте або видаліть коментарі там, де ви вважаєте це доречним (так, іноді видалення коментаря може зробити код більш читабельним) і змініть імена змінних там, де, на вашу думку, це покращить розуміння коду.

# %%
# this program computes the number of seconds in a given number of hours

hours = 2
seconds_in_hour = 3600

print("Hours: ", hours)
print("Seconds in {0} hours: {1}".format(hours, hours * seconds_in_hour))

# TODO: here we should also print "Goodbye", but a programmer didn't have time to write any code

# %% [markdown]
# ### Завдання № 6 

# %% [markdown]
# Ваше завдання – завершити код, щоб отримати результати чотирьох основних арифметичних операцій.
# 
# Результати мають бути виведені у консолі.
# 
# Можливо, ви не зможете захистити код від користувача, який хоче ділити на нуль. Пізніше ми взнаємо, як це зробити.

# %%
a = float(input("Enter a: "))
b = float(input("Enter b: "))

import math


# output the result of addition here
# output the result of subtraction here
# output the result of multiplication here
# output the result of division here

print("a + b = ", a + b)
print("a - b = ", a - b)
print("a * b = ", a * b)

if(math.fabs(b) < 1e-7):
    print("Division by zero!")
else:
    print("a / b = ", a / b)

print("\nThat's all, folks!")

# %% [markdown]
# ### Завдання № 7 

# %% [markdown]
# Ваше завдання -- завершити код, щоб оцінити такий вираз:
# $$\frac{1}{x + \frac{1}{x + \frac{1}{x + \frac{1}{x + \frac{1}{x}}}}}$$
# 
# 
# Результат має бути присвоєний `y`.
# 
# Ви можете використовувати додаткові змінні для зменшення виразу (але це не обов'язково). Ретельно тестуйте свій код.

# %%
x = float(input("Enter value for x: "))

y = 1 / (x + 1 / (x + 1 / (x + 1 / x)))

print("y =", y)

# %% [markdown]
# __Тестові дані__
# 
# `x = 1`
# 
# `y = 0.6000000000000001`
# 
# `x = 10`
# 
# `y = 0.09901951266867294`
# 
# `x = 100`
# 
# `y = 0.009999000199950014`
# 
# `x = -5`
# 
# `y = -0.19258202567760344`

# %% [markdown]
# ### Завдання № 8

# %% [markdown]
# Ваше завдання - підготувати простий код, здатний порахувати час закінчення періоду часу, вираженого в кількості хвилин (воно може бути як завгодно великим). Час початку вказується у вигляді пари годин (0..23) та хвилин (0..59). Результат повинен бути надрукований на консолі.
# 
# Наприклад, якщо подія починається о __12:17__ і триває __59__ хвилин, вона закінчується о __13:16__.
# 
# Не турбуйтеся про будь-які недоліки у вашому коді –- це нормально, якщо він приймає неприпустимий час -– найважливіше, що код видає дійсні результати для правильних вхідних даних.
# 
# Ретельно перевірте код. Підказка: використання оператора `%` може бути ключем до успіху.

# %%
hour = int(input("Starting time (hours): "))
mins = int(input("Starting time (minutes): "))
dura = int(input("Event duration (minutes): "))

mins += dura

hour += mins // 60
mins %= 60
hour %= 24
print (hour, ":", mins, sep="")

# %% [markdown]
# __Тестові дані__
# 
# Приклад вводу:
# 
# `12`
# 
# `17`
# 
# `59`

# %% [markdown]
# Очікуваний результат: `13:16`

# %% [markdown]
# Приклад вводу:
# 
# `23`
# 
# `58`
# 
# `642`

# %% [markdown]
# Очікуваний результат: `10:40`

# %% [markdown]
# Приклад вводу:
# 
# `0`
# 
# `1`
# 
# `2939`

# %% [markdown]
# Очікуваний результат: `1:0`

# %% [markdown]
# ## Завдання для самостіної роботи
# 
# 1. Виконати завдання 1-8, наведені вище у цьому зошиті.
# 
# 1. Створити файл __lab_3_StudentLastName.py__ з написаним кодом. 
# 
# 1. Закомітити файл у локальний репозиторій.
# 
# 1. Відправити поточну версію Git-проєкта у віддалений репозиторій на GitHub.
# 
# 1. Звіт має складатися з файлу (за основу взяти __цей Python-зошит__)  `lab_3_StudentLastName.ipynb`. (Можливі якісь додакові файли)

# %% [markdown]
# ## Контрольні запитання
# 
# 1. Який вивод наступного фрагмента?
# ![image.png](attachment:1360c658-010b-4de1-a472-146e2538d7fa.png)
# 
# "55"
# 
# 1. Який очікуваний результат наступного фрагмента?
# ![image.png](attachment:60241ea3-0668-4101-b53a-ded32d40f1be.png)
# 
# <class 'str'>

# %% [markdown]
# ## References

# %% [markdown]
# 1. [Anaconda (Python distribution)](https://uk.wikipedia.org/wiki/Anaconda_(Python_distribution))
# 2. [Conda](https://conda.io/en/latest/)
# 3. [Pro Git Book](https://git-scm.com/book/en/v2)
# 4. [OpenEDG Python Institute](https://pythoninstitute.org/)
# 5. [Cisco. Networking Academy](https://www.netacad.com/)
# 6. [Научно-издательская система Quarto](https://data-visualization-blog.netlify.app/posts/quarto/)


